Create and Connect to Azure Kubernetes cluster in Azure Arc (CLI): - K8s done in May2021- Azure Arc updated in July 1-2021 - Verified all running on cluster, except app deployment!

====================================================================================================
https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough

https://docs.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster

https://docs.microsoft.com/en-us/azure/azure-arc/kubernetes/conceptual-configurations


the rest of the scripts - from simple kubectl commands
===============================================
I: Create Kubernetes cluster on Azure
=================================================
#1. Create AKS cluster on Azure 
#Create a new resource group first if not yet or needed

az group create --name myaksgroup --location eastus

# Enable monitoring:

az provider show -n Microsoft.OperationsManagement -o table
az provider show -n Microsoft.OperationalInsights -o table

#register monitoring providers: 

az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

##Create AKS cluster:

az aks create --resource-group myaksgroup --name myk8scluster001 --node-count 1 --enable-addons monitoring --generate-ssh-keys

#*** (Not tested!) The SSH key will be saved in local Azure Shell storage under /home/user, if need a backup, may need look into azcopy of other commands. 

#install CLI to the cluster:  

az aks install-cli

--------------------------------------------
#2. Connect to myk8scluster001
#Connect to your cluster using command line tooling to interact directly with cluster using kubectl. Kubectl is available within the Azure Cloud Shell by default and can also be installed locally. 

#Open Cloud Shell or the Azure CLI

az account set --subscription c9408de5-5684-4eb3-84c7-c33cda73ab5c

az aks get-credentials --resource-group myaksgroup --name myk8scluster001
------------------------------------

#3. Run Kubernetes command
# Once you have run the command above to connect to the cluster, you can run any kubectl commands. Here are a few examples of useful commands you can try.

# List all deployments in all namespaces
kubectl get deployments --all-namespaces=true

# List all deployments in a specific namespace
# Format :kubectl get deployments --namespace <namespace-name>
kubectl get deployments --namespace kube-system

#Sample response: 

NAMESPACE     NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
kube-system   coredns              2/2     2            2           23m
kube-system   coredns-autoscaler   1/1     1            1           23m
kube-system   metrics-server       1/1     1            1           23m
kube-system   omsagent-rs          1/1     1            1           23m
kube-system   tunnelfront          1/1     1            1           23m

---------------------------------------
//App deployment - to be tested!!!

# List details about a specific deployment
# Format :kubectl describe deployment <deployment-name> --namespace <namespace-name>
kubectl describe deployment my-dep --namespace kube-system

# list pods:

kubectl get pods --namespace kube-system

#Sample response: 
NAME                                  READY   STATUS    RESTARTS   AGE
azure-ip-masq-agent-r8rxh             1/1     Running   0          27m
coredns-76c97c8599-95v7k              1/1     Running   0          29m
coredns-76c97c8599-mb4tn              1/1     Running   0          27m
coredns-autoscaler-599949fd86-8cqcd   1/1     Running   0          29m
kube-proxy-ll7h5                      1/1     Running   0          27m
metrics-server-77c8679d7d-zqsq6       1/1     Running   1          29m
omsagent-qmxg5                        1/1     Running   0          27m
omsagent-rs-758c55858c-gmzdh          1/1     Running   0          29m
tunnelfront-54ccc5f69b-qh62t          1/1     Running   0          29m


# List pods using a specific label
# Format :kubectl get pods -l <label-key>=<label-value> --all-namespaces=true
kubectl get pods -l app=nginx --all-namespaces=true

# Get logs for all pods with a specific label
# Format :kubecl logs -l <label-key>=<label-value>

kubectl logs -l app=nginx --namespace kube-system

===================================================
II: Connect K8s cluster in Azure Arc:

https://docs.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster
https://docs.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster#install-cli-extensions
====================================================
//Azure Arc using TCP port 443 for outbound. Make sure port 

//Note: if connectk8s extension not already install, from Cloud Shell on Azure Portal:
az extension add --name connectedk8s 
az extension add --name k8s-configuration
az version

//If already exists, will get message "Extension 'connectedk8s' is already installed."

//Make sure install Helm - download & install. Check
helm version

1. register providers for AzureArc enabled Kubernetes namespaces:

az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.ExtendedLocation

#Monitor the registration process - may take 10min:

az provider show -n Microsoft.Kubernetes -o table
az provider show -n Microsoft.KubernetesConfiguration -o table
az provider show -n Microsoft.ExtendedLocation -o table

2. Connect existing K8s clusters: 
# Locate the resource group of the existing K8s cluster: (this may take a few min)

az connectedk8s connect --name myakscluster001 --resource-group myaksgroup

#***verify cluster connection: (or check portal)
az connectedk8s list --resource-group  myaksgroup --output table

4.(optional) Connect using an outbound proxy: 

#Set environment variable: 
#sample bash: 
export HTTP_PROXY=<proxy-server-ip-address>:<port>
export HTTPS_PROXY=<proxy-server-ip-address>:<port>
export NO_PROXY=<cluster-apiserver-ip-address>:<port>

#CLI: 
set HTTP_PROXY=<proxy-server-ip-address>:<port>
set HTTPS_PROXY=<proxy-server-ip-address>:<port>
set NO_PROXY=<cluster-apiserver-ip-address>:<port>

#Run connectedk8s with proxy parameters:

az connectedk8s connect --name <cluster-name> --resource-group <resource-group> --proxy-https https://<proxy-server-ip-address>:<port> --proxy-http http://<proxy-server-ip-address>:<port> --proxy-skip-range <excludedIP>,<excludedCIDR> --proxy-cert <path-to-cert-file>

5. View Azure Arc agents for K8s clusters running on pods: 

# Verify deployments for pods: 

kubectl get deployments,pods -n azure-arc

//Outputs: 


 NAME                                        READY      UP-TO-DATE  AVAILABLE  AGE
 deployment.apps/cluster-metadata-operator     1/1             1        1      16h
 deployment.apps/clusteridentityoperator       1/1             1        1      16h
 deployment.apps/config-agent                  1/1             1        1      16h
 deployment.apps/controller-manager            1/1             1        1      16h
 deployment.apps/flux-logs-agent               1/1             1        1      16h
 deployment.apps/metrics-agent                 1/1             1        1      16h
 deployment.apps/resource-sync-agent           1/1             1        1      16h

 NAME                                           READY    STATUS   RESTART AGE
 pod/cluster-metadata-operator-7fb54d9986-g785b  2/2     Running  0       16h
 pod/clusteridentityoperator-6d6678ffd4-tx8hr    3/3     Running  0       16h
 pod/config-agent-544c4669f9-4th92               3/3     Running  0       16h
 pod/controller-manager-fddf5c766-ftd96          3/3     Running  0       16h
 pod/flux-logs-agent-7c489f57f4-mwqqv            2/2     Running  0       16h
 pod/metrics-agent-58b765c8db-n5l7k              2/2     Running  0       16h
 pod/resource-sync-agent-5cf85976c7-522p5        3/3     Running  0       16h
 
6. Clean up resources: -delete all Azure Arc related configuration resources (may not recommend using portal)

az connectedk8s delete --name AzureArcTest1 --resource-group AzureArcTest

az group delete --resource-group myaksgroup

//go portal to verify










